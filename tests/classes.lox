// Test class declaration with methods
class DevonshireCream {
    serveOn() {
        return "Scones";
    }
}

// Test instanciation
class Bagel {}
var a = Bagel();

a.foo = 3;
assert a.foo == 3;

// Test methods
class Bacon {
    eat() {
        return "Yummy!";
    }
}

assert Bacon().eat() == "Yummy!";

// Test usage of "this" in a method
class Cake {
    flavor() {
        return "vanilla";
    }

    describe() {
        return "This is a " + this.flavor() + " cake.";
    }
}

var cake = Cake();
assert cake.describe() == "This is a vanilla cake.";


// Method hoisting
class Person {
    getName() {
        return this.name;
    }
}

var jane = Person();
jane.name = "Jane";
var method = jane.getName;

assert method() == "Jane";

// Test field initialization and access
class Car {
    setInfo(make, model) {
        this.make = make;
        this.model = model;
    }

    getInfo() {
        return this.make + " " + this.model;
    }
}

var myCar = Car();
myCar.setInfo("Toyota", "Corolla");
assert myCar.make == "Toyota";
assert myCar.model == "Corolla";
assert myCar.getInfo() == "Toyota Corolla";

// Test method overriding (without inheritance)
class Animal {
    speak() {
        return "The animal makes a sound";
    }
}

class Dog {
    speak() {
        return "Woof!";
    }
}

var animal = Animal();
var dog = Dog();
assert animal.speak() == "The animal makes a sound";
assert dog.speak() == "Woof!";

// Test scope and shadowing with 'this'
class Counter {
    init() {
        this.count = 0;
    }

    increment(count) {
        this.count = this.count + count;
    }

    getCount() {
        return this.count;
    }
}

var counter = Counter();
counter.init();
counter.increment(5);
assert counter.getCount() == 5;

// Test 'this' in nested functions
class Calculator {
    setValue(initial) {
        this.value = initial;
    }

    operate(func) {
        var capturedThis = this;
        fun operation(x) {
            capturedThis.value = func(capturedThis.value, x);
        }
        return operation;
    }

    getValue() {
        return this.value;
    }
}

var calc = Calculator();
calc.setValue(10);
var add = calc.operate(fun(a, b) { return a + b; });
add(5);
assert calc.getValue() == 15;

// Test method chaining
class StringBuilder {
    init() {
        this.str = "";
    }

    append(text) {
        this.str = this.str + text;
        return this;
    }

    toString() {
        return this.str;
    }
}

var builder = StringBuilder();
builder.init();
var result = builder
    .append("Hello")
    .append(" ")
    .append("World")
    .toString();
assert result == "Hello World";

// Test method that modifies multiple fields
class Rectangle {
    init() {
        this.width = 0;
        this.height = 0;
    }

    setDimensions(width, height) {
        this.width = width;
        this.height = height;
    }

    area() {
        return this.width * this.height;
    }
}

// Test static method
class MathUtils {
    static square(x) {
        return x * x;
    }
}

assert MathUtils.square(4) == 16;
assert MathUtils.square(-3) == 9;

// Test getters

class Circle {
    init(radius) {
        this.radius = radius;
    }

    area {
        return 3.141592653 * this.radius * this.radius;
    }
}

var circle = Circle(4);
assert circle.area == (3.141592653 * 16);

// Test getter that uses other getter
class Temperature {
    init(fahrenheit) {
        this.fahrenheit = fahrenheit;
    }

    celsius {
        return (this.fahrenheit - 32) * 5/9;
    }

    kelvin {
        return this.celsius + 273.15;
    }
}

var temp = Temperature(212);
assert temp.fahrenheit == 212;
assert temp.celsius == 100;
assert temp.kelvin == 373.15;


// Test method inheritance

class Doughnut {
    cook() {
        return "10 minutes";
    }
}

class BostonCream < Doughnut {}

assert BostonCream().cook() == "10 minutes";

// Test cascade inheritance with super
class A {
    method() {
        return "Method A";
    }
}

class B < A {
    method() {
        return "Method B";
    }

    test() {
        super.method();
    }
}

class C < B {}

assert C().test() == "Method A";